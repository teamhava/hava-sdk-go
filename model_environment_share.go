/*
Hava

Hava API

API version: 1.1.3
Contact: support@hava.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package havaclient

import (
	"encoding/json"
)

// EnvironmentShare struct for EnvironmentShare
type EnvironmentShare struct {
	// The unique ID to be used in the embedded viewer snippet
	Id *string `json:"id,omitempty"`
	// The unique ID of the environment being share
	EnvironmentId *string `json:"environment_id,omitempty"`
	// The type of share
	Type *string `json:"type,omitempty"`
}

// NewEnvironmentShare instantiates a new EnvironmentShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentShare() *EnvironmentShare {
	this := EnvironmentShare{}
	return &this
}

// NewEnvironmentShareWithDefaults instantiates a new EnvironmentShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentShareWithDefaults() *EnvironmentShare {
	this := EnvironmentShare{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnvironmentShare) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentShare) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnvironmentShare) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EnvironmentShare) SetId(v string) {
	o.Id = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *EnvironmentShare) GetEnvironmentId() string {
	if o == nil || isNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentShare) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || isNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *EnvironmentShare) HasEnvironmentId() bool {
	if o != nil && !isNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *EnvironmentShare) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EnvironmentShare) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentShare) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EnvironmentShare) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EnvironmentShare) SetType(v string) {
	o.Type = &v
}

func (o EnvironmentShare) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentShare struct {
	value *EnvironmentShare
	isSet bool
}

func (v NullableEnvironmentShare) Get() *EnvironmentShare {
	return v.value
}

func (v *NullableEnvironmentShare) Set(val *EnvironmentShare) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentShare) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentShare(val *EnvironmentShare) *NullableEnvironmentShare {
	return &NullableEnvironmentShare{value: val, isSet: true}
}

func (v NullableEnvironmentShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
