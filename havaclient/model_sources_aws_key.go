/*
Hava

Hava API

API version: 1.1.1
Contact: support@hava.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package havaclient

import (
	"encoding/json"
)

// SourcesAWSKey The parameters required to create an AWS Key Source
type SourcesAWSKey struct {
	// The name for this source
	Name *string `json:"name,omitempty"`
	// Must be set to AWS::Keys
	Type *string `json:"type,omitempty"`
	// The access key for your AWS account
	AccessKey *string `json:"access_key,omitempty"`
	// The secret key for your AWS account
	SecretKey *string `json:"secret_key,omitempty"`
}

// NewSourcesAWSKey instantiates a new SourcesAWSKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourcesAWSKey() *SourcesAWSKey {
	this := SourcesAWSKey{}
	return &this
}

// NewSourcesAWSKeyWithDefaults instantiates a new SourcesAWSKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcesAWSKeyWithDefaults() *SourcesAWSKey {
	this := SourcesAWSKey{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SourcesAWSKey) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesAWSKey) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SourcesAWSKey) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SourcesAWSKey) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SourcesAWSKey) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesAWSKey) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SourcesAWSKey) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SourcesAWSKey) SetType(v string) {
	o.Type = &v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *SourcesAWSKey) GetAccessKey() string {
	if o == nil || isNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesAWSKey) GetAccessKeyOk() (*string, bool) {
	if o == nil || isNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *SourcesAWSKey) HasAccessKey() bool {
	if o != nil && !isNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *SourcesAWSKey) SetAccessKey(v string) {
	o.AccessKey = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *SourcesAWSKey) GetSecretKey() string {
	if o == nil || isNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesAWSKey) GetSecretKeyOk() (*string, bool) {
	if o == nil || isNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *SourcesAWSKey) HasSecretKey() bool {
	if o != nil && !isNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *SourcesAWSKey) SetSecretKey(v string) {
	o.SecretKey = &v
}

func (o SourcesAWSKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.AccessKey) {
		toSerialize["access_key"] = o.AccessKey
	}
	if !isNil(o.SecretKey) {
		toSerialize["secret_key"] = o.SecretKey
	}
	return json.Marshal(toSerialize)
}

type NullableSourcesAWSKey struct {
	value *SourcesAWSKey
	isSet bool
}

func (v NullableSourcesAWSKey) Get() *SourcesAWSKey {
	return v.value
}

func (v *NullableSourcesAWSKey) Set(val *SourcesAWSKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSourcesAWSKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSourcesAWSKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourcesAWSKey(val *SourcesAWSKey) *NullableSourcesAWSKey {
	return &NullableSourcesAWSKey{value: val, isSet: true}
}

func (v NullableSourcesAWSKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourcesAWSKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


