/*
Hava

Hava API

API version: 1.1.1
Contact: support@hava.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package havaclient

import (
	"encoding/json"
)

// EnvironmentsEnvironmentIdBody struct for EnvironmentsEnvironmentIdBody
type EnvironmentsEnvironmentIdBody struct {
	// The updated name for the environment
	Name *string `json:"name,omitempty"`
	// The updated query string for the environment
	Query string `json:"query"`
	// If true the environment will be set to active and display on your environment list
	Complete *bool `json:"complete,omitempty"`
}

// NewEnvironmentsEnvironmentIdBody instantiates a new EnvironmentsEnvironmentIdBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentsEnvironmentIdBody(query string) *EnvironmentsEnvironmentIdBody {
	this := EnvironmentsEnvironmentIdBody{}
	this.Query = query
	return &this
}

// NewEnvironmentsEnvironmentIdBodyWithDefaults instantiates a new EnvironmentsEnvironmentIdBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentsEnvironmentIdBodyWithDefaults() *EnvironmentsEnvironmentIdBody {
	this := EnvironmentsEnvironmentIdBody{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvironmentsEnvironmentIdBody) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentsEnvironmentIdBody) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvironmentsEnvironmentIdBody) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvironmentsEnvironmentIdBody) SetName(v string) {
	o.Name = &v
}

// GetQuery returns the Query field value
func (o *EnvironmentsEnvironmentIdBody) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *EnvironmentsEnvironmentIdBody) GetQueryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *EnvironmentsEnvironmentIdBody) SetQuery(v string) {
	o.Query = v
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *EnvironmentsEnvironmentIdBody) GetComplete() bool {
	if o == nil || isNil(o.Complete) {
		var ret bool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentsEnvironmentIdBody) GetCompleteOk() (*bool, bool) {
	if o == nil || isNil(o.Complete) {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *EnvironmentsEnvironmentIdBody) HasComplete() bool {
	if o != nil && !isNil(o.Complete) {
		return true
	}

	return false
}

// SetComplete gets a reference to the given bool and assigns it to the Complete field.
func (o *EnvironmentsEnvironmentIdBody) SetComplete(v bool) {
	o.Complete = &v
}

func (o EnvironmentsEnvironmentIdBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["query"] = o.Query
	}
	if !isNil(o.Complete) {
		toSerialize["complete"] = o.Complete
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentsEnvironmentIdBody struct {
	value *EnvironmentsEnvironmentIdBody
	isSet bool
}

func (v NullableEnvironmentsEnvironmentIdBody) Get() *EnvironmentsEnvironmentIdBody {
	return v.value
}

func (v *NullableEnvironmentsEnvironmentIdBody) Set(val *EnvironmentsEnvironmentIdBody) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentsEnvironmentIdBody) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentsEnvironmentIdBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentsEnvironmentIdBody(val *EnvironmentsEnvironmentIdBody) *NullableEnvironmentsEnvironmentIdBody {
	return &NullableEnvironmentsEnvironmentIdBody{value: val, isSet: true}
}

func (v NullableEnvironmentsEnvironmentIdBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentsEnvironmentIdBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


