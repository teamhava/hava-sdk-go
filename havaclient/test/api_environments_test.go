/*
Hava

Testing EnvironmentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_EnvironmentsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test EnvironmentsApiService EnvironmentRevisionsIndex", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var environmentId string

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentRevisionsIndex(context.Background(), environmentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnvironmentsApiService EnvironmentSharesCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var environmentId string

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentSharesCreate(context.Background(), environmentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnvironmentsApiService EnvironmentSharesFind", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var environmentId string
        var shareId string

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentSharesFind(context.Background(), environmentId, shareId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnvironmentsApiService EnvironmentSharesList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var environmentId string

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentSharesList(context.Background(), environmentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnvironmentsApiService EnvironmentSharesUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var environmentId string
        var shareId string

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentSharesUpdate(context.Background(), environmentId, shareId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnvironmentsApiService EnvironmentsCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentsCreate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnvironmentsApiService EnvironmentsDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var environmentId string

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentsDestroy(context.Background(), environmentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnvironmentsApiService EnvironmentsIndex", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentsIndex(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnvironmentsApiService EnvironmentsShow", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var environmentId string

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentsShow(context.Background(), environmentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EnvironmentsApiService EnvironmentsUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var environmentId string

        resp, httpRes, err := apiClient.EnvironmentsApi.EnvironmentsUpdate(context.Background(), environmentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
