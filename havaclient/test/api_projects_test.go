/*
Hava

Testing ProjectsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ProjectsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ProjectsApiService ProjectMembersAdd", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string
        var projectId string

        resp, httpRes, err := apiClient.ProjectsApi.ProjectMembersAdd(context.Background(), accountId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ProjectMembersRemove", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string
        var projectId string
        var userId string

        resp, httpRes, err := apiClient.ProjectsApi.ProjectMembersRemove(context.Background(), accountId, projectId, userId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ProjectsCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ProjectsApi.ProjectsCreate(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ProjectsDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string
        var projectId string

        resp, httpRes, err := apiClient.ProjectsApi.ProjectsDestroy(context.Background(), accountId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ProjectsIndex", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string

        resp, httpRes, err := apiClient.ProjectsApi.ProjectsIndex(context.Background(), accountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ProjectsShow", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string
        var projectId string

        resp, httpRes, err := apiClient.ProjectsApi.ProjectsShow(context.Background(), accountId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ProjectsUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var accountId string
        var projectId string

        resp, httpRes, err := apiClient.ProjectsApi.ProjectsUpdate(context.Background(), accountId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
