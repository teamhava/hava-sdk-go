/*
Hava

Testing SourcesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_SourcesApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test SourcesApiService SourcesCreate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SourcesApi.SourcesCreate(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SourcesApiService SourcesDestroy", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sourceId string

        resp, httpRes, err := apiClient.SourcesApi.SourcesDestroy(context.Background(), sourceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SourcesApiService SourcesIndex", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SourcesApi.SourcesIndex(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SourcesApiService SourcesShow", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sourceId string

        resp, httpRes, err := apiClient.SourcesApi.SourcesShow(context.Background(), sourceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SourcesApiService SourcesSync", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sourceId string

        resp, httpRes, err := apiClient.SourcesApi.SourcesSync(context.Background(), sourceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SourcesApiService SourcesUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sourceId string

        resp, httpRes, err := apiClient.SourcesApi.SourcesUpdate(context.Background(), sourceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
